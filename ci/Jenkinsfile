// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

ci_cpu = "metaprojdev/meta:ci_cpu-v0.18"
ci_gpu = "metaprojdev/meta:ci_gpu-v0.20"

docker_run = 'docker/bash.sh'
max_time = 120

raf_multilib = "build/config.cmake, " +
               "build/lib/libtvm.so, " +
               "build/lib/libraf.so"

raf_multilib_cutlass = raf_multilib + ", " +
                       "build/lib/libcutlass.so"

def init_git_unix() {
  checkout scm
  retry(5) {
    timeout(time: 2, unit: 'MINUTES') {
      sh 'git submodule update --init --recursive --force'
    }
  }
}

def init_git_win() {
  checkout scm
  retry(5) {
    timeout(time: 2, unit: 'MINUTES') {
      bat 'git submodule update --init --recursive --force'
    }
  }
}

def make(docker_type, path) {
  timeout(time: max_time, unit: 'MINUTES') {
    sh "${docker_run} ${docker_type} ./ci/task_clean.sh ${path}"
    sh "${docker_run} ${docker_type} ./ci/task_build.sh ${path} -j\$(nproc)"
    sh "${docker_run} ${docker_type} ./ci/task_cpp_unittest.sh"
  }
}

def pack_lib(name, libs) {
  sh """
     echo "Packing ${libs} into ${name}"
     echo ${libs} | sed -e 's/,/ /g' | xargs md5sum
     """
  stash includes: libs, name: name
}

def unpack_lib(name, libs) {
  unstash name
  sh """
     echo "Unpacked ${libs} from ${name}"
     echo ${libs} | sed -e 's/,/ /g' | xargs md5sum
     """
}

def cancel_previous_build() {
  // cancel previous build if it is not on main.
  if (env.BRANCH_NAME != "main") {
    def buildNumber = env.BUILD_NUMBER as int
    // Milestone API allows us to cancel previous build
    // with the same milestone number
    if (buildNumber > 1) milestone(buildNumber - 1)
    milestone(buildNumber)
  }
}

def run_node_if_not_skipped(node_type, node_name, is_skipped, Closure closure) {
  if (is_skipped == 0) {
    node(node_type) {
      closure.call()
    }
  } else {
    Utils.markStageSkippedForConditional(node_name)
  }
}

cancel_previous_build()

stage("Lint") {
  timeout(time: max_time, unit: 'MINUTES') {
    node('linux-cpu') {
      init_git_unix()
      skip_test = sh (
        returnStatus: true,
        script: "${docker_run} ${ci_cpu} ./scripts/lint/git-skip-testing.sh",
        label: "Check if only the docs are changed",
      )
      sh "${docker_run} ${ci_cpu} ./ci/task_lint.sh"
      sh "${docker_run} ${ci_cpu} ./ci/task_check_autogen.sh"
    }
  }
}

stage('Build') {
  parallel 'BUILD: GPU': {
    run_node_if_not_skipped('linux-gpu', 'BUILD: GPU', skip_test) {
      init_git_unix()
      sh """
         mkdir -p build
         cd build
         cp ../cmake/config.cmake .
         echo "set(RAF_USE_LLVM llvm-config-8)" >> config.cmake
         echo "set(RAF_USE_GTEST ON)" >> config.cmake
         echo "set(RAF_USE_CUDA ON)" >> config.cmake
         echo "set(RAF_CUDA_ARCH 75)" >> config.cmake
         echo "set(RAF_USE_CUDNN ON)" >> config.cmake
         echo "set(RAF_USE_CUBLAS ON)" >> config.cmake
         echo "set(RAF_USE_MPI ON)" >> config.cmake
         echo "set(RAF_USE_NCCL ON)" >> config.cmake
         echo "set(RAF_USE_CUTLASS ON)" >> config.cmake
         echo "set(CMAKE_BUILD_TYPE Release)" >> config.cmake
         """
      make(ci_gpu, 'build')
      pack_lib('gpu', raf_multilib_cutlass)
    }
  },
  'BUILD: CPU': {
    run_node_if_not_skipped('linux-cpu', 'BUILD: CPU', skip_test) {
      init_git_unix()
      sh """
         mkdir -p build
         cd build
         cp ../cmake/config.cmake .
         echo "set(RAF_USE_LLVM llvm-config-8)" >> config.cmake
         echo "set(RAF_USE_GTEST ON)" >> config.cmake
         echo "set(RAF_USE_CUDA OFF)" >> config.cmake
         echo "set(RAF_USE_CUDNN OFF)" >> config.cmake
         echo "set(RAF_USE_CUBLAS OFF)" >> config.cmake
         echo "set(CMAKE_BUILD_TYPE Release)" >> config.cmake
         """
      make(ci_cpu, 'build')
      pack_lib('cpu', raf_multilib)
    }
  }
}

stage('Unit Test') {
  parallel 'python3: GPU': {
    run_node_if_not_skipped('linux-gpu', 'python3: GPU', skip_test) {
      init_git_unix()
      unpack_lib('gpu', raf_multilib_cutlass)
      timeout(time: max_time, unit: 'MINUTES') {
        sh "${docker_run} ${ci_gpu} nvidia-smi -L"
        sh "${docker_run} ${ci_gpu} ./scripts/src_codegen/run_all.sh"
        sh "${docker_run} ${ci_gpu} RAF_DISABLE_CPU_TEST=1 ./ci/task_python_unittest.sh"
      }
    }
  },
  'python3: CPU': {
    run_node_if_not_skipped('linux-cpu', 'python3: CPU', skip_test) {
      init_git_unix()
      unpack_lib('cpu', raf_multilib)
      timeout(time: max_time, unit: 'MINUTES') {
        sh "${docker_run} ${ci_cpu} ./scripts/src_codegen/run_all.sh"
        sh "${docker_run} ${ci_cpu} ./ci/task_python_unittest.sh"
      }
    }
  },
  'python3: multi-GPU': {
    run_node_if_not_skipped('linux-gpu-4x', 'python3: multi-GPU', skip_test) {
      init_git_unix()
      unpack_lib('gpu', raf_multilib_cutlass)
      timeout(time: max_time, unit: 'MINUTES') {
        sh "${docker_run} ${ci_gpu} nvidia-smi -L"
        sh "${docker_run} ${ci_gpu} ./scripts/src_codegen/run_all.sh"
        sh "${docker_run} ${ci_gpu} ./ci/task_python_distributed.sh"
      }
    }
  }
}
